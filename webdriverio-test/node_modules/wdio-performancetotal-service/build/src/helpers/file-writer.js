"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
class FileWriter {
    /**
     * Overwrites data to file
     * @param filePath
     * @param content
     */
    writeToFile(filePath, content) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield fs_1.promises.writeFile(filePath, content);
            }
            catch (err) {
                console.log(`Performance-Total error: writeFile failed: ${err}`);
            }
        });
    }
    appendLineToFile(filePath, lineContent) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield fs_1.promises.appendFile(filePath, lineContent);
            }
            catch (err) {
                console.log(`Performance-Total error: appendFile failed: ${err}`);
            }
        });
    }
    readAllLines(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            let data = "";
            try {
                data = yield fs_1.promises.readFile(filePath, "utf-8");
            }
            catch (err) {
                console.log(`Performance-Total error: readFile failed: ${err}`);
            }
            const stringArray = data.split("\n");
            return stringArray;
        });
    }
    makeDir(dirPath) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield fs_1.promises.mkdir(dirPath);
            }
            catch (err) {
                console.log(`Performance-Total error: can't create dir: ${dirPath}: ${err}`);
            }
        });
    }
    isFileExist(dirPath) {
        return __awaiter(this, void 0, void 0, function* () {
            let isExists = false;
            try {
                yield fs_1.promises.access(dirPath);
                isExists = true;
            }
            catch (_a) {
                isExists = false;
            }
            return isExists;
        });
    }
}
exports.default = new FileWriter();
