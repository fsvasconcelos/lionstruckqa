"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerformanceLogger = void 0;
const partial_log_entry_1 = require("./entities/partial-log-entry");
const id_generator_1 = require("./helpers/id-generator");
const performance_analyzer_1 = require("./performance-analyzer");
const storage_cache_1 = require("./storage-cache");
class PerformanceLogger {
    constructor() {
        this._storageCache = new storage_cache_1.StorageCache();
    }
    sampleStart(stepName, instanceId) {
        const logEntry = this.setSample(partial_log_entry_1.StepType.Start, stepName, instanceId);
        this._storageCache._startLogEntries.unshift(logEntry);
    }
    sampleEnd(stepName, instanceId) {
        const logEntry = this.setSample(partial_log_entry_1.StepType.End, stepName, instanceId);
        this._storageCache._endLogEntries.push(logEntry);
    }
    flush(fileName, isTestPassed) {
        console.log("Performance-Total: flushing to file: " + fileName);
        this._storageCache.createPerformanceEntries(isTestPassed);
        this._storageCache.writePerformanceDataToFile(fileName);
    }
    analyzeResults(sourceLogFileName, saveResultsFilePath, dropResultsFromFailedTest) {
        return __awaiter(this, void 0, void 0, function* () {
            const analyzer = new performance_analyzer_1.PerformanceAnalyzer();
            yield analyzer.analyze(sourceLogFileName, saveResultsFilePath, dropResultsFromFailedTest);
        });
    }
    setSample(stepType, stepName, instanceId) {
        let id = "";
        const logEntry = new partial_log_entry_1.PartialLogEntry();
        if (stepType === partial_log_entry_1.StepType.Start) {
            id = new id_generator_1.IdGenerator().getId();
        }
        else {
            id = this._storageCache.getStartIdByStepName(stepName, instanceId);
        }
        logEntry.id = id;
        logEntry.instanceId = instanceId;
        logEntry.name = stepName;
        logEntry.type = partial_log_entry_1.StepType.Start;
        logEntry.time = new Date().getTime();
        logEntry.displayTime = new Date().toLocaleString();
        return logEntry;
    }
}
exports.PerformanceLogger = PerformanceLogger;
