"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageCache = void 0;
const performance_log_entry_1 = require("./entities/performance-log-entry");
const file_writer_1 = __importDefault(require("./helpers/file-writer"));
class StorageCache {
    constructor() {
        this._startLogEntries = new Array();
        this._endLogEntries = new Array();
        this._performanceEntries = new Array();
    }
    createPerformanceEntries(isTestPassed) {
        const revStartEntries = this._startLogEntries.reverse();
        revStartEntries.forEach(startEntry => {
            const tempPerformanceEntry = new performance_log_entry_1.PerformanceLogEntry();
            const correspondedEndEntry = this._endLogEntries.find((e) => e.id == startEntry.id);
            if (correspondedEndEntry) {
                tempPerformanceEntry.id = startEntry.id;
                tempPerformanceEntry.instanceId = startEntry.instanceId;
                tempPerformanceEntry.name = correspondedEndEntry.name;
                tempPerformanceEntry.startDisplayTime = startEntry.displayTime;
                tempPerformanceEntry.startTime = startEntry.time;
                tempPerformanceEntry.endTime = correspondedEndEntry.time;
                tempPerformanceEntry.duration = tempPerformanceEntry.getDuration();
                tempPerformanceEntry.isTestPassed = isTestPassed;
                this._performanceEntries.push(tempPerformanceEntry);
            }
        });
    }
    getStartIdByStepName(stepName, instanceId) {
        let id = "";
        const startEntry = this._startLogEntries.find((e) => e.name == stepName && e.instanceId == instanceId);
        if (startEntry) {
            id = startEntry.id;
            startEntry.name += "_used";
        }
        return id;
    }
    clearData() {
        this._startLogEntries = [];
        this._endLogEntries = [];
        this._performanceEntries = [];
    }
    writePerformanceDataToFile(fileName) {
        this._performanceEntries.forEach((performanceEntry) => __awaiter(this, void 0, void 0, function* () {
            yield file_writer_1.default.appendLineToFile(fileName, `${JSON.stringify(performanceEntry)}\n`);
        }));
        ;
        this.clearData();
    }
}
exports.StorageCache = StorageCache;
