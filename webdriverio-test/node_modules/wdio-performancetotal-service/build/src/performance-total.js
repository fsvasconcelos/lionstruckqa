"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const performance_logger_1 = require("./performance-logger");
const path_1 = __importDefault(require("path"));
const file_writer_1 = __importDefault(require("./helpers/file-writer"));
const id_generator_1 = require("./helpers/id-generator");
class PerformanceTotal {
    constructor(appendToExistingFile = false) {
        this._resultsDir = "";
        this.logFileName = "performance-log.txt";
        this._performanceResultsFileName = "performance-results";
        this._instanceid = new id_generator_1.IdGenerator().getId("inst");
        this.performanceLogger = new performance_logger_1.PerformanceLogger();
    }
    get outDir() {
        return this._resultsDir;
    }
    sampleStart(stepName) {
        this.performanceLogger.sampleStart(stepName, this._instanceid);
    }
    sampleEnd(stepName) {
        this.performanceLogger.sampleEnd(stepName, this._instanceid);
    }
    /**
     * @deprecated Don't use this method if *wdio-performancetotal-service* is enabled.
     * @param disableAppendToExistingFile If true, existing performance data will be overwritten for each test suite.
     */
    initialize(disableAppendToExistingFile) {
        return __awaiter(this, void 0, void 0, function* () {
            this._resultsDir = yield this.createResultsDirIfNotExist();
            const initObj = JSON.stringify({ "startDisplayTime": new Date().toLocaleString(), "instanceID": this._instanceid });
            const fileName = path_1.default.join(this._resultsDir, this.logFileName);
            if (disableAppendToExistingFile) {
                yield file_writer_1.default.writeToFile(fileName, `${initObj}\n`);
            }
            else {
                yield file_writer_1.default.appendLineToFile(fileName, `${initObj}\n`);
            }
        });
    }
    /**
     * @deprecated Don't use this method if *wdio-performancetotal-service* is enabled.
     * @param isTestPassed
     */
    finalize(isTestPassed) {
        this.performanceLogger.flush(this.getFilePath(this.logFileName), isTestPassed);
    }
    /**
     * @deprecated Don't use this method if *wdio-performancetotal-service* is enabled.
     * @param performanceResultsFileName The result output file name w/o extension.
     * @param dropResultsFromFailedTest If true - performance analysis will not includ failed tests.
     */
    analyzeResults(performanceResultsFileName, dropResultsFromFailedTest) {
        return __awaiter(this, void 0, void 0, function* () {
            let resultsFileName = this._performanceResultsFileName;
            if (performanceResultsFileName) {
                resultsFileName = performanceResultsFileName;
            }
            yield this.performanceLogger.analyzeResults(this.getFilePath(this.logFileName), this.getFilePath(resultsFileName), dropResultsFromFailedTest);
        });
    }
    getFilePath(fileName) {
        return path_1.default.join(this._resultsDir, fileName);
    }
    createResultsDirIfNotExist() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resultsDir = "performance-results";
            const root = (_a = require.main) === null || _a === void 0 ? void 0 : _a.paths[0].split('node_modules')[0].slice(0, -1);
            if (!root) {
                console.log("Performance-Total error: Can't get root folder");
                return "";
            }
            const dirPath = path_1.default.join(root, resultsDir);
            const isFileExists = yield file_writer_1.default.isFileExist(dirPath);
            if (!isFileExists) {
                yield file_writer_1.default.makeDir(dirPath);
            }
            return dirPath;
        });
    }
}
exports.default = new PerformanceTotal();
