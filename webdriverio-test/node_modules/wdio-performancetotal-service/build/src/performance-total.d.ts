declare class PerformanceTotal {
    private _instanceid;
    private _resultsDir;
    private logFileName;
    private _performanceResultsFileName;
    private performanceLogger;
    constructor(appendToExistingFile?: boolean);
    get outDir(): string;
    sampleStart(stepName: string): void;
    sampleEnd(stepName: string): void;
    /**
     * @deprecated Don't use this method if *wdio-performancetotal-service* is enabled.
     * @param disableAppendToExistingFile If true, existing performance data will be overwritten for each test suite.
     */
    initialize(disableAppendToExistingFile: boolean): Promise<void>;
    /**
     * @deprecated Don't use this method if *wdio-performancetotal-service* is enabled.
     * @param isTestPassed
     */
    finalize(isTestPassed: boolean): void;
    /**
     * @deprecated Don't use this method if *wdio-performancetotal-service* is enabled.
     * @param performanceResultsFileName The result output file name w/o extension.
     * @param dropResultsFromFailedTest If true - performance analysis will not includ failed tests.
     */
    analyzeResults(performanceResultsFileName?: string, dropResultsFromFailedTest?: boolean): Promise<void>;
    private getFilePath;
    private createResultsDirIfNotExist;
}
declare const _default: PerformanceTotal;
export default _default;
