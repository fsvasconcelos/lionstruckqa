"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerformanceAnalyzer = void 0;
const performance_result_1 = require("./entities/performance-result");
const calculator_1 = __importDefault(require("./helpers/calculator"));
const file_writer_1 = __importDefault(require("./helpers/file-writer"));
const group_1 = __importDefault(require("./helpers/group"));
const objects_to_csv_1 = __importDefault(require("objects-to-csv"));
class PerformanceAnalyzer {
    constructor() {
        this._performanceResults = new Array();
    }
    analyze(logFileName, saveDataFilePath, dropResultsFromFailedTest) {
        return __awaiter(this, void 0, void 0, function* () {
            const performanceLogEntries = yield this.deserializeData(logFileName);
            let groupedResults;
            if (!dropResultsFromFailedTest) {
                groupedResults = group_1.default.groupBy(performanceLogEntries, p => p.name);
            }
            else {
                const entriesWithTestPass = performanceLogEntries.filter((e) => e.isTestPassed === true);
                groupedResults = group_1.default.groupBy(entriesWithTestPass, p => p.name);
            }
            groupedResults.forEach(group => {
                const durationList = group.map(t => t.duration);
                const performanceResult = new performance_result_1.PerformanceResult();
                const avgAndSte = calculator_1.default.getAverageAndStandardDeviation(durationList);
                performanceResult.name = group[0].name;
                performanceResult.earliestTime = group[0].startDisplayTime;
                performanceResult.latestTime = group[group.length - 1].startDisplayTime;
                performanceResult.averageTime = avgAndSte[0];
                performanceResult.sem = avgAndSte[1];
                performanceResult.repeats = durationList.length;
                performanceResult.minValue = Math.min(...durationList);
                performanceResult.maxValue = Math.max(...durationList);
                this._performanceResults.push(performanceResult);
            });
            const picked = this._performanceResults.map(({ name, averageTime, sem, repeats, minValue, maxValue }) => ({ name, averageTime, sem, repeats, minValue, maxValue }));
            console.log("\nPerformance-Total results:\n");
            console.table(picked);
            this.serializeData(saveDataFilePath);
        });
    }
    serializeData(saveDataFilePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const jsonDataFilePath = saveDataFilePath + ".json";
            yield file_writer_1.default.appendLineToFile(jsonDataFilePath, JSON.stringify(this._performanceResults));
            // write to csv
            const csv = new objects_to_csv_1.default(this._performanceResults);
            const csvString = yield csv.toString(true);
            yield file_writer_1.default.writeToFile(saveDataFilePath + ".csv", csvString);
        });
    }
    deserializeData(fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            const resultsArray = new Array();
            const textResultsArray = yield file_writer_1.default.readAllLines(fileName);
            textResultsArray.forEach(textResult => {
                if (textResult != "") {
                    const performanceResult = JSON.parse(textResult);
                    if (performanceResult.id !== undefined) {
                        resultsArray.push(performanceResult);
                    }
                }
            });
            return resultsArray;
        });
    }
}
exports.PerformanceAnalyzer = PerformanceAnalyzer;
